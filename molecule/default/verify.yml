---
- name: Verify
  hosts: all
  become: true
  vars:
    goss_version: "latest"
    goss_arch: "amd64"
    goss_dst: "/usr/bin/goss"
    goss_url: "https://github.com/aelsabbahy/goss/releases/download/{{ goss_version }}/goss-linux-{{ goss_arch }}"
    goss_test_directory: "/tmp"
    goss_format: "tap"
  tasks:
    - name: Include defaults vars
      include_vars:
        dir: "../../defaults"
        extensions: ["yml"]

    - name: Include vars
      include_vars:
        dir: "../../vars"
        extensions: ["yml"]

    - block:
        - name: Get latest Goss release
          uri:
            url: "https://api.github.com/repos/aelsabbahy/goss/releases/latest"
            method: GET
            return_content: true
            status_code: 200
            body_format: json
          register: _latest_release
          until: _latest_release.status == 200
          retries: 5

        - name: "Set Goss version to {{ _latest_release.json.tag_name[1:] }}"
          set_fact:
            goss_version: "v{{ _latest_release.json.tag_name[1:] }}"
      when: goss_version == "latest"
      run_once: true

    - name: Download and install Goss
      get_url:
        url: "{{ goss_url }}"
        dest: "{{ goss_dst }}"
        checksum: "sha256:{{ goss_url }}.sha256"
        mode: 0755
      register: _progress_status
      until: _progress_status is succeeded
      retries: 5

    - name: Copy Goss tests to remote
      template:
        src: "{{ item }}"
        dest: "{{ goss_test_directory }}/{{ item | basename }}"
        mode: 0644
      with_fileglob:
        - "{{ lookup('env', 'MOLECULE_VERIFIER_TEST_DIRECTORY') }}/test_*.yml"

    - name: Register test files
      shell: "ls {{ goss_test_directory }}/test_*.yml"
      changed_when: false
      register: test_files

    - name: Execute Goss tests
      environment:
        PATH: "/opt/rh/rh-git218/root/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      command: "{{ goss_dst }} -g {{ item }} validate -f {{ goss_format }}"
      changed_when: false
      register: test_results
      with_items: "{{ test_files.stdout_lines }}"
      ignore_errors: true

    - name: Display details about the results
      debug:
        msg: "{{ item.stdout_lines }}"
      with_items: "{{ test_results.results }}"

    - name: Fail when tests fail
      fail:
        msg: "Goss failed to validate"
      when: item.rc != 0
      with_items: "{{ test_results.results }}"
